<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java多线程学习（一）</title>
    <link href="/2023/05/26/JavaThread/Java-multithread-1/"/>
    <url>/2023/05/26/JavaThread/Java-multithread-1/</url>
    
    <content type="html"><![CDATA[<h2 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h2><ol><li>进程和线程的相关概念</li><li>实现线程的四种方法</li><li>线程的相关类和接口</li></ol><h2 id="进程和线程的概念"><a href="#进程和线程的概念" class="headerlink" title="进程和线程的概念"></a>进程和线程的概念</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程指程序的一次执行过程，具有动态性，有状态间的相互切换<br>一般来说一个进程包括以下内容：</p><ul><li><p>程序段：进程的程序指令在内存中的位置，包含所有需要执行的指令集合</p></li><li><p>数据段：存放进程所需要的各种数据</p></li><li><p>PCB:包含程序的描述信息和和控制信息，是进程存在的唯一标识</p></li></ul><p>其中PCB中包含以下信息：</p><ul><li>进程描述信息</li><li>进程调度信息</li><li>进程的资源信息</li><li>进程上下文</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程指“进程代码段”的一次顺序执行过程。是CPU调度的基本单位，一个进程可以有多个线程<br>各个线程之间共享进行的内存空间、系统资源<br>一个线程有以下三个部分：</p><ul><li>线程描述信息</li><li>程序计数器</li><li>栈内存</li></ul><h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h3><ul><li>进程包含线程</li><li>分配资源：进程，执行单位：线程</li><li>进程之间相互独立，线程之间不一定相互独立，共享资源：堆，方法区等</li><li>切换速度不同，进程切换时TLB,页表等都可能替换</li></ul><h2 id="实现线程的四种方法"><a href="#实现线程的四种方法" class="headerlink" title="实现线程的四种方法"></a>实现线程的四种方法</h2><h3 id="继承Thred类"><a href="#继承Thred类" class="headerlink" title="继承Thred类"></a>继承<code>Thred</code>类</h3><ol><li>自定义类并继承<code>Thread</code>类</li><li>重写<code>run</code>方法</li><li>调用<code>start</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> String tName;<br><br>    MyThread(String tName)&#123;<br>        <span class="hljs-built_in">this</span>.tName = tName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(tName + <span class="hljs-string">&quot; running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testThread</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程&quot;</span> + i).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    线程0 running</span><br><span class="hljs-comment">    线程2 running</span><br><span class="hljs-comment">    线程1 running</span><br><span class="hljs-comment">    线程3 running</span><br><span class="hljs-comment">    线程4 running</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现<code>Runnable</code>接口</h3><ol><li>定义新类实现<code>Runnable</code>接口</li><li>实现<code>Runnable</code>的<code>run</code>抽象方法</li><li>通过<code>Thread</code>类创建线程对象,将<code>Runnable</code>实例作为实际参数传递给<code>Thread</code>类的构造器<br> 该构造器将<code>Runnable</code>实例赋值给自己的<code>target</code>变量</li><li>调用<code>start()</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现`Runnable`接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    MyRunnable(String name)&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;runnable:&quot;</span> + name + <span class="hljs-string">&quot; running&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRunnable</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-string">&quot;线程&quot;</span> + i)).start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    runnable:线程0 running</span><br><span class="hljs-comment">    runnable:线程1 running</span><br><span class="hljs-comment">    runnable:线程3 running</span><br><span class="hljs-comment">    runnable:线程2 running</span><br><span class="hljs-comment">    runnable:线程4 running</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>在这种方式下，<code>Thread</code>类的<code>run</code>方法会调用<code>target</code>的<code>run</code>方法<br>而<code>targert</code>实际上正是<code>Runnable</code>类型的实例：<code>private Runnable target;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.target != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.target.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了直接定义新类实现<code>Runnable</code>外,还有以下两种方式</p><ol><li>匿名内部类</li><li>Lambda表达式</li></ol><h3 id="使用Callable和FutureTask创建线程"><a href="#使用Callable和FutureTask创建线程" class="headerlink" title="使用Callable和FutureTask创建线程"></a>使用<code>Callable</code>和<code>FutureTask</code>创建线程</h3><p>前两种方式都不能获取异步执行的结果。因为<code>run</code>方法没有提供返回值</p><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><ol><li>编写一个<code>callable</code>的实现类,重写<code>call</code>方法</li><li>利用实现类的对象实例化一个<code>FutureTask</code>对象</li><li>使用<code>FutureTask</code>对象实例化一个<code>Thread</code>对象</li><li>调用<code>start</code>方法，该方法会调用<code>FutureTask</code>的<code>run</code>方法，<code>run</code>方法会调用<code>call</code>方法</li><li>使用<code>Futuretask</code>的<code>get</code>方法获取结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Long&gt; &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.print(<span class="hljs-string">&quot;MyCallable &quot;</span> + name + <span class="hljs-string">&quot; running&quot;</span>+<span class="hljs-string">&quot;, &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextLong();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCallable</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        FutureTask&lt;Long&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-string">&quot; &quot;</span> + i));<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;结果：&quot;</span> + futureTask.get());<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 测试结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    MyCallable  0 running, 结果：-6077239496012931430</span><br><span class="hljs-comment">    MyCallable  1 running, 结果：-7711535468802093405</span><br><span class="hljs-comment">    MyCallable  2 running, 结果：-5826319857958460016</span><br><span class="hljs-comment">    MyCallable  3 running, 结果：291853280479707483</span><br><span class="hljs-comment">    MyCallable  4 running, 结果：7280324925652476418</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="通过线程池创建线程"><a href="#通过线程池创建线程" class="headerlink" title="通过线程池创建线程"></a>通过线程池创建线程</h3><p><code>Java</code>中提供了一个静态工厂来创建不同的线程池，该静态工厂为<code>Executors</code>工厂类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestExecutors</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个包含三个线程的线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            executorService.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnRunnable</span>(<span class="hljs-string">&quot;&quot;</span> + i));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReturnRunnable</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;runnable...&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ExecutorService接口"><a href="#ExecutorService接口" class="headerlink" title="ExecutorService接口"></a><code>ExecutorService</code>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ExecutorService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Executor</span> &#123;<br>    <span class="hljs-comment">// 只需要传入对应的的实例即可运行线程</span><br>    &lt;T&gt; Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Callable&lt;T&gt; var1)</span>;<br>    &lt;T&gt; Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Runnable var1, T var2)</span>;<br>    Future&lt;?&gt; submit(Runnable var1);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程的相关类和接口"><a href="#线程的相关类和接口" class="headerlink" title="线程的相关类和接口"></a>线程的相关类和接口</h2><ul><li>函数式接口：只有一个抽象方法的接口，<code>@FunctionalInterface</code>表明这一点</li></ul><h3 id="Thread-类"><a href="#Thread-类" class="headerlink" title="Thread 类"></a><code>Thread</code> 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> String name;   <span class="hljs-comment">// 线程名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> priority;   <span class="hljs-comment">// 优先级</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> daemon; <span class="hljs-comment">// 是否为守护线程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> interrupted;   <span class="hljs-comment">// 是否被中断</span><br>    <span class="hljs-keyword">private</span> Runnable target;    <span class="hljs-comment">// </span><br>    ThreadLocal.ThreadLocalMap threadLocals;    <span class="hljs-comment">// 线程私有变量</span><br>    ThreadLocal.ThreadLocalMap inheritableThreadLocals; <span class="hljs-comment">// 可以被子线程继承线程私有变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> tid;     <span class="hljs-comment">// 线程ID</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> threadStatus;<span class="hljs-comment">// 线程的状态</span><br>&#125;<br></code></pre></td></tr></table></figure><p>疑问：</p><ol><li>线程名为什么使用<code>volatile</code>关键字？</li></ol><h3 id="Callable-接口"><a href="#Callable-接口" class="headerlink" title="Callable 接口"></a><code>Callable</code> 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Callable</span>&lt;V&gt; &#123;<br>    V <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Runable-接口"><a href="#Runable-接口" class="headerlink" title="Runable 接口"></a><code>Runable</code> 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FutureTask-类"><a href="#FutureTask-类" class="headerlink" title="FutureTask 类"></a><code>FutureTask</code> 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureTask</span>&lt;V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RunnableFuture</span>&lt;V&gt; &#123;<br>    <span class="hljs-keyword">private</span> Callable&lt;V&gt; callable; <span class="hljs-comment">// 线程的并发执行、任务结果的异步获取</span><br>    <span class="hljs-keyword">private</span> Object outcome; <span class="hljs-comment">// 异步执行结果</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RunnableFuture-接口"><a href="#RunnableFuture-接口" class="headerlink" title="RunnableFuture 接口"></a><code>RunnableFuture</code> 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RunnableFuture</span>&lt;V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Runnable</span>, Future&lt;V&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个接口同时继承了<code>Runnable，Future</code>两个接口。<br>第一个接口保证了它能被赋值为<code>Thread</code>的<code>target</code>变量。被<code>Thread</code>执行<br>第二个接口保证了可以获取未来的结果</p><p>该接口提供了以下功能</p><ul><li>能够取消异步中执行的任务</li><li>能够判断异步任务是否完成</li><li>能够获取任务完成后的执行结果</li></ul><p>而<code>FutureTask</code> 提供了对该接口的具体实现</p><p><code>FutureTask</code>的<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// ...... </span><br>    <span class="hljs-type">Callable</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.callable;<br>    result = c.call();  <span class="hljs-comment">// 调用call方法并获取结果</span><br>    ran = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (ran) <br>        <span class="hljs-built_in">this</span>.set(result);   <span class="hljs-comment">// 保存结果到outcome</span><br>    <span class="hljs-comment">// ......</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Future-接口"><a href="#Future-接口" class="headerlink" title="Future 接口"></a><code>Future</code> 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Future</span>&lt;V&gt; &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-type">boolean</span> var1)</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCancelled</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDone</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">// 获取结果 阻塞性质</span><br>    V <span class="hljs-title function_">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException;<br>    <span class="hljs-comment">//设置阻塞时限，获取结果</span><br>    V <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">long</span> var1, TimeUnit var3)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Java高并发核心编程 卷 2</p>]]></content>
    
    
    <categories>
      
      <category>Java multithread</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
