<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唯见青山</title>
  <icon>http://llmathur.github.io/icon.png</icon>
  <subtitle>熟能生巧，勤能补拙。</subtitle>
  <link href="http://llmathur.github.io/atom.xml" rel="self"/>
  
  <link href="http://llmathur.github.io/"/>
  <updated>2023-06-03T08:58:12.116Z</updated>
  <id>http://llmathur.github.io/</id>
  
  <author>
    <name>llmathur</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RequestContextHolder 详解（一）</title>
    <link href="http://llmathur.github.io/2023/06/02/RequestContextHolder-Learning/"/>
    <id>http://llmathur.github.io/2023/06/02/RequestContextHolder-Learning/</id>
    <published>2023-06-02T12:54:56.000Z</published>
    <updated>2023-06-03T08:58:12.116Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;内容总结&quot;&gt;&lt;a href=&quot;#内容总结&quot; class=&quot;headerlink&quot; title=&quot;内容总结&quot;&gt;&lt;/a&gt;内容总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如何使用&lt;code&gt;RequestContextHolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何存放&lt;code&gt;request，response&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;什么时候存放&lt;/li&gt;
&lt;li&gt;为什么有两个&lt;code&gt;ThreadLocal&lt;/code&gt;容器</summary>
    
    
    
    <category term="Source Code" scheme="http://llmathur.github.io/categories/Source-Code/"/>
    
    
  </entry>
  
  <entry>
    <title>Java多线程学习（四）</title>
    <link href="http://llmathur.github.io/2023/05/28/Java-multithread/Java-multithread-4/"/>
    <id>http://llmathur.github.io/2023/05/28/Java-multithread/Java-multithread-4/</id>
    <published>2023-05-28T01:22:28.000Z</published>
    <updated>2023-06-03T08:57:47.002Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;内容总结&quot;&gt;&lt;a href=&quot;#内容总结&quot; class=&quot;headerlink&quot; title=&quot;内容总结&quot;&gt;&lt;/a&gt;内容总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如何确定线程池的数目&lt;/li&gt;
&lt;li&gt;ThreadLocal的源码分析，使用场景</summary>
    
    
    
    <category term="Java multithread" scheme="http://llmathur.github.io/categories/Java-multithread/"/>
    
    
  </entry>
  
  <entry>
    <title>Java多线程学习（三）</title>
    <link href="http://llmathur.github.io/2023/05/27/Java-multithread/Java-multithread-3/"/>
    <id>http://llmathur.github.io/2023/05/27/Java-multithread/Java-multithread-3/</id>
    <published>2023-05-27T01:44:34.000Z</published>
    <updated>2023-06-01T11:33:44.353Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;内容总结&quot;&gt;&lt;a href=&quot;#内容总结&quot; class=&quot;headerlink&quot; title=&quot;内容总结&quot;&gt;&lt;/a&gt;内容总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;线程池的架构，相关的接口和类&lt;/li&gt;
&lt;li&gt;使用Executors 创建线程的方式&lt;/li&gt;
&lt;li&gt;线程池的标准创建方式：使用TheadPoolExecutor构造方法&lt;/li&gt;
&lt;li&gt;线程池的任务调度流程&lt;/li&gt;
&lt;li&gt;阻塞队列，拒绝策略&lt;/li&gt;
&lt;li&gt;关闭线程池，线程池的状态</summary>
    
    
    
    <category term="Java multithread" scheme="http://llmathur.github.io/categories/Java-multithread/"/>
    
    
  </entry>
  
  <entry>
    <title>Java多线程学习（二）</title>
    <link href="http://llmathur.github.io/2023/05/26/Java-multithread/Java-multithread-2/"/>
    <id>http://llmathur.github.io/2023/05/26/Java-multithread/Java-multithread-2/</id>
    <published>2023-05-26T13:11:50.000Z</published>
    <updated>2023-05-28T03:08:50.683Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;内容总结&quot;&gt;&lt;a href=&quot;#内容总结&quot; class=&quot;headerlink&quot; title=&quot;内容总结&quot;&gt;&lt;/a&gt;内容总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;线程的核心原理：调度，优先级，生命周期等&lt;/li&gt;
&lt;li&gt;线程的基本操作：sleep方法，interrupt方法等&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java multithread" scheme="http://llmathur.github.io/categories/Java-multithread/"/>
    
    
  </entry>
  
  <entry>
    <title>Java多线程学习（一）</title>
    <link href="http://llmathur.github.io/2023/05/26/Java-multithread/Java-multithread-1/"/>
    <id>http://llmathur.github.io/2023/05/26/Java-multithread/Java-multithread-1/</id>
    <published>2023-05-26T07:26:47.000Z</published>
    <updated>2023-05-28T03:06:41.383Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;内容总结&quot;&gt;&lt;a href=&quot;#内容总结&quot; class=&quot;headerlink&quot; title=&quot;内容总结&quot;&gt;&lt;/a&gt;内容总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;进程和线程&lt;/li&gt;
&lt;li&gt;线程的相关类和接口&lt;/li&gt;
&lt;li&gt;实现线程的四种方法&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java multithread" scheme="http://llmathur.github.io/categories/Java-multithread/"/>
    
    
  </entry>
  
  <entry>
    <title>HashMap source code</title>
    <link href="http://llmathur.github.io/2023/05/25/collections/HashMap-source-code/"/>
    <id>http://llmathur.github.io/2023/05/25/collections/HashMap-source-code/</id>
    <published>2023-05-25T11:58:20.000Z</published>
    <updated>2023-05-26T12:06:52.769Z</updated>
    
    
    <summary type="html">&lt;p&gt;JDK版本 :&lt;br&gt;    openjdk 17.0.7 2023-04-18 LTS&lt;br&gt;    OpenJDK Runtime Environment Corretto-17.0.7.7.1 (build 17.0.7+7-LTS)&lt;br&gt;    OpenJDK 64-Bit Server VM Corretto-17.0.7.7.1 (build 17.0.7+7-LTS, mixed mode, sharing)&lt;/p&gt;</summary>
    
    
    
    <category term="collections" scheme="http://llmathur.github.io/categories/collections/"/>
    
    
  </entry>
  
  <entry>
    <title>Questions-1</title>
    <link href="http://llmathur.github.io/2023/05/25/someQuestions/Questions-1/"/>
    <id>http://llmathur.github.io/2023/05/25/someQuestions/Questions-1/</id>
    <published>2023-05-25T06:47:07.000Z</published>
    <updated>2023-05-26T10:57:41.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题目来源&quot;&gt;&lt;/a&gt;题目来源&lt;/h2&gt;&lt;p&gt;如何判断 Java 工程师的基础知识是否扎实？ - 王争的回答 - 知乎&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    <category term="question" scheme="http://llmathur.github.io/categories/question/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式-工厂</title>
    <link href="http://llmathur.github.io/2023/05/25/design%20pattern/Factory-Design-Pattern/"/>
    <id>http://llmathur.github.io/2023/05/25/design%20pattern/Factory-Design-Pattern/</id>
    <published>2023-05-25T02:09:19.000Z</published>
    <updated>2023-05-26T10:49:41.467Z</updated>
    
    
    <summary type="html">&lt;p&gt;程序设计中的工厂类是对对象构造、实例化、初始化的封装，&lt;br&gt;而工厂方法对工厂构造方法进行接口规范化，以允许子类工厂决定具体制造那类产品的实例。&lt;/p&gt;</summary>
    
    
    
    <category term="design pattern" scheme="http://llmathur.github.io/categories/design-pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>ArrayList源码分析</title>
    <link href="http://llmathur.github.io/2023/05/24/collections/ArrayList-source-code/"/>
    <id>http://llmathur.github.io/2023/05/24/collections/ArrayList-source-code/</id>
    <published>2023-05-24T13:22:33.000Z</published>
    <updated>2023-05-26T11:50:17.076Z</updated>
    
    
    <summary type="html">&lt;p&gt;JDK版本 :&lt;br&gt;    openjdk 17.0.7 2023-04-18 LTS&lt;br&gt;    OpenJDK Runtime Environment Corretto-17.0.7.7.1 (build 17.0.7+7-LTS)&lt;br&gt;    OpenJDK 64-Bit Server VM Corretto-17.0.7.7.1 (build 17.0.7+7-LTS, mixed mode, sharing)&lt;/p&gt;</summary>
    
    
    
    <category term="collections" scheme="http://llmathur.github.io/categories/collections/"/>
    
    
  </entry>
  
  <entry>
    <title>一些问题</title>
    <link href="http://llmathur.github.io/2023/05/19/someQuestions/Questions-0/"/>
    <id>http://llmathur.github.io/2023/05/19/someQuestions/Questions-0/</id>
    <published>2023-05-19T13:49:31.000Z</published>
    <updated>2023-05-26T10:57:41.460Z</updated>
    
    
    <summary type="html">&lt;p&gt;记录一些想到的问题&lt;/p&gt;
&lt;h2 id=&quot;1-什么是Java方法重写&quot;&gt;&lt;a href=&quot;#1-什么是Java方法重写&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Java方法重写&quot;&gt;&lt;/a&gt;1.什么是Java方法重写&lt;/h2&gt;&lt;p&gt;要求遵循“两同两大一小”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“两同” 指方法名相同，形参列表相同&lt;/li&gt;
&lt;li&gt;“两小” 指子类方法返回值类型应该比父类返回值类型更小，子类方法声明抛出的异常类应该比父类方法抛出的更小或者相等&lt;/li&gt;
&lt;li&gt;“一大” 指子类方法的访问权限应该比父类方法的访问权限更大或者相等。</summary>
    
    
    
    <category term="question" scheme="http://llmathur.github.io/categories/question/"/>
    
    
  </entry>
  
  <entry>
    <title>redis概览</title>
    <link href="http://llmathur.github.io/2023/05/18/redis/RedisLearning-1/"/>
    <id>http://llmathur.github.io/2023/05/18/redis/RedisLearning-1/</id>
    <published>2023-05-18T06:35:26.000Z</published>
    <updated>2023-05-29T02:54:45.432Z</updated>
    
    
    <summary type="html">&lt;p&gt;从整体上概览Redis的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Redis" scheme="http://llmathur.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM学习（一）</title>
    <link href="http://llmathur.github.io/2023/05/16/JVM-learning/JVMLearning/"/>
    <id>http://llmathur.github.io/2023/05/16/JVM-learning/JVMLearning/</id>
    <published>2023-05-16T11:33:58.000Z</published>
    <updated>2023-05-26T10:53:28.250Z</updated>
    
    
    <summary type="html">&lt;p&gt;编译器可以分为：前端编译器、JIT 编译器和AOT编译器。&lt;/p&gt;</summary>
    
    
    
    <category term="JVM" scheme="http://llmathur.github.io/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>Testing</title>
    <link href="http://llmathur.github.io/2023/05/16/MIT6.031%20Software%20Construction/Testing/"/>
    <id>http://llmathur.github.io/2023/05/16/MIT6.031%20Software%20Construction/Testing/</id>
    <published>2023-05-16T06:10:42.000Z</published>
    <updated>2023-05-27T11:41:26.570Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Objectives&quot;&gt;&lt;a href=&quot;#Objectives&quot; class=&quot;headerlink&quot; title=&quot;Objectives&quot;&gt;&lt;/a&gt;Objectives&lt;/h2&gt;&lt;p&gt;这是学习完该章节后需要达到的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;understand the value of testing ,and know the process of test-first programming;&lt;/li&gt;
&lt;li&gt;be able to jude a test suite for correctness,thoroughness,and size;&lt;/li&gt;
&lt;li&gt;be able to design a test suite for a method by partitioning its input space and choosing good test cases;&lt;/li&gt;
&lt;li&gt;be able to judge a test suite by measuring its code coverage;&lt;/li&gt;
&lt;li&gt;understand and know when to use black box vs. glass box testing, unit tests vs. integration tests, and automated regression testing.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="MIT6.031 Software Construction" scheme="http://llmathur.github.io/categories/MIT6-031-Software-Construction/"/>
    
    
  </entry>
  
  <entry>
    <title>OAuth 2.0</title>
    <link href="http://llmathur.github.io/2023/05/09/OAuth-2-0/OAuth-2-0/"/>
    <id>http://llmathur.github.io/2023/05/09/OAuth-2-0/OAuth-2-0/</id>
    <published>2023-05-09T11:01:43.000Z</published>
    <updated>2023-05-27T06:04:51.731Z</updated>
    
    
    <summary type="html">&lt;p&gt;OAuth 的核心就是向第三方应用颁发令牌&lt;br&gt;四种授权方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;（授权码）authorization-code&lt;/li&gt;
&lt;li&gt;（隐藏式）implicit&lt;/li&gt;
&lt;li&gt;（密码式）password&lt;/li&gt;
&lt;li&gt;（客户端凭证）client credentials&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注：任何一种方式，第三方应用都必须到系统备案，以获取客户端ID（client ID）和客户端密钥（client secret）&lt;/p&gt;</summary>
    
    
    
    <category term="OAuth2.0" scheme="http://llmathur.github.io/categories/OAuth2-0/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式-原型</title>
    <link href="http://llmathur.github.io/2023/04/07/design%20pattern/ProtoTypeDesignPattern/"/>
    <id>http://llmathur.github.io/2023/04/07/design%20pattern/ProtoTypeDesignPattern/</id>
    <published>2023-04-07T06:00:02.000Z</published>
    <updated>2023-05-26T10:51:13.071Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;原型模式达到以原型实例创建副本实例的目的即可，并不需要知道其他原始类，也就是说，原型模式可以用对象创建对象，而不是用类创建对象，以此达到效率的提升。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对那些非常复杂的初始化过程的对象或者是需要耗费大量资源的情况，原型模式是更好的选择。&lt;/p&gt;</summary>
    
    
    
    <category term="design pattern" scheme="http://llmathur.github.io/categories/design-pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>TCP/IP学习（一）</title>
    <link href="http://llmathur.github.io/2023/04/05/TCP-IP/TCPIPLearning/"/>
    <id>http://llmathur.github.io/2023/04/05/TCP-IP/TCPIPLearning/</id>
    <published>2023-04-05T05:32:11.000Z</published>
    <updated>2023-05-27T06:05:08.291Z</updated>
    
    
    <summary type="html">&lt;p&gt;目前绝大多数网络都采用TCP&amp;#x2F;IP协议，TCP&amp;#x2F;IP是目前最完整的、被普遍接受的通信协议标准&lt;/p&gt;</summary>
    
    
    
    <category term="TCP/IP" scheme="http://llmathur.github.io/categories/TCP-IP/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式-单例</title>
    <link href="http://llmathur.github.io/2023/04/01/design%20pattern/SingletonDesignPattern/"/>
    <id>http://llmathur.github.io/2023/04/01/design%20pattern/SingletonDesignPattern/</id>
    <published>2023-04-01T12:56:49.000Z</published>
    <updated>2023-05-26T10:52:22.187Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;单例即单实例，指在系统(程序)中，某个类只存在一个实例，同时提供集中、统一的访问接口。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个对象有可能贯穿整个应用程序，而且起到了全局统一管理控制的作用，那么单例模式也许是一个值得考虑的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;code&gt;Spring&lt;/code&gt;中&lt;code&gt;bean&lt;/code&gt;的定义可以被定义为两种：&lt;code&gt;prototype(原型)&lt;/code&gt;,&lt;code&gt;singleton(单例)&lt;/code&gt;&lt;br&gt;&lt;code&gt;线程池（threadpool）&lt;/code&gt;, &lt;code&gt;缓存（cache）&lt;/code&gt;等比较适合设计为单例模式。&lt;/p&gt;</summary>
    
    
    
    <category term="design pattern" scheme="http://llmathur.github.io/categories/design-pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式-解释器</title>
    <link href="http://llmathur.github.io/2023/04/01/design%20pattern/InterpreterDesignPattern/"/>
    <id>http://llmathur.github.io/2023/04/01/design%20pattern/InterpreterDesignPattern/</id>
    <published>2023-04-01T06:56:02.000Z</published>
    <updated>2023-05-27T06:01:48.191Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;解释器模式(Interpreter)会针对某种语言并基于其语法特征创建一系列的表达式类（包括终极表达式与非终极表达式），利用树结构模式将表达式对象组装起来，最终将其翻译成计算机能够识别并执行的语义树。&lt;/p&gt;
&lt;p&gt;例如结构型数据库对查询语言SQL的解析，浏览器对HTML语言的解析，以及操作系统Shell对命令的解析。不同的语言有着不同的语法和翻译方式，这都依靠解释器完成.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="design pattern" scheme="http://llmathur.github.io/categories/design-pattern/"/>
    
    
    <category term="解释器" scheme="http://llmathur.github.io/tags/%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
    <category term="设计模式" scheme="http://llmathur.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
